---
title: "HW3"
author: "Ben Rochford"
format: html
editor: visual
theme: vapor
---

Setup:

```{r}
library(tidyverse)
library(ggthemes)
data("faithful")

rename(faithful, all_of(c(wait_to_next_eruption = "waiting", eruption_duration = "eruptions")))

ggplot(
    data = faithful, 
    mapping = aes(x = eruptions, y = waiting)
  ) + geom_point() + labs(x="eruption duration", y="wait to next eruption") +
  theme_tufte()
```

## 3.1.1.1.1.1.1.1

Modify the code to make the points larger squares and slightly transparent. See `?geom_point` for more information on the point layer.

```{r}
ggplot(faithful) + 
  geom_point(aes(x = eruptions, y = waiting), 
             alpha = 0.65, shape = 15) + 
  labs(x="eruption duration", y="wait to next eruption") +
  theme_tufte()
```

## 3.1.1.2

Color the two visible clusters in the histogram with different colors.

```{r}
ggplot(faithful) + 
  geom_histogram(aes(x = eruptions, fill = eruptions > 3.3))+ 
  labs(x="eruption duration", y="wait to next eruption") +
  theme_tufte()
```

## 3.1.1.3

Add a line that separates the two point distributions.

```{r}
ggplot(faithful) + 
  geom_point(aes(x = eruptions, y = waiting), 
             alpha = 0.65, shape = 15) + 
  geom_abline(intercept = 111, slope = -15) +
  labs(x="eruption duration", y="wait to next eruption") +
  theme_tufte()
```

## 3.1.3.1

```{r}
data(mpg)
```

Use `RColorBrewer::display.brewer.all()` to see all the different palettes from Color Brewer and pick your favorite. Modify the code to use it.

```{r}
ggplot(mpg) + 
  geom_point(aes(x = displ, y = hwy, color = class)) + 
  scale_color_brewer(palette = "Set3")+
  theme_tufte()
```

## 3.1.3.2

Modify the code to create a bubble chart (scatterplot with size mapped to a continuous variable) showing `cyl` with size. Make sure that only the present amount of cylinders (4, 5, 6, and 8) are present in the legend

```{r}
ggplot(mpg) + 
  geom_point(aes(x = displ, y = hwy, color = class, size = cyl)) + 
  scale_size(breaks = c(4,5,6,8)) +
  scale_color_brewer(palette = "Set3") +
  theme_tufte()
```

## 3.1.3.3

Modify the code below so that color is no longer mapped to the discrete `class` variable, but to the continuous `cty` variable. What happens to the guide?

```{r}
ggplot(mpg) + 
  geom_point(aes(x = displ, y = hwy, color = cty, size = cty)) +
  theme_few()
```

The guide switched to a continuous color scale, where the brighter blue dots are the bigger ones since the size is also mapped to cty.\

The type of guide can be controlled with the `guide` argument in the scale, or with the `guides()` function. Continuous colors have a gradient color bar by default, but setting it to `legend` will turn it back to the standard look. What happens when multiple aesthetics are mapped to the same variable and uses the (same??) guide type?

```{r}
ggplot(mpg) + 
  geom_point(aes(x = displ, y = hwy, color = cty, size = cty)) +
  scale_color_continuous(guide = "legend") + scale_size_continuous(guide = "legend") + theme_few()
```

It combines them! Cool.

## 3.1.4.1

Check out the scales argument for this plot:

```{r}
ggplot(mpg) + 
  geom_point(aes(x = displ, y = hwy)) + 
  facet_wrap(~ drv, scales = "free") +
  theme_few()
```

## 3.1.5.1

Here we go

```{r}
mpg |> 
  ggplot(aes(y = class, fill = drv)) + 
  geom_bar() + 
  facet_wrap(~year) + 
  labs(
    title = "Number of car models per class",
    subtitle = "Oh God What Have I Done",
    caption = "source: http://fueleconomy.gov",
    x = 'Number of cars',
    y = NULL
  ) + 
  theme(
    text = element_text('Comic Sans MS', angle = 8, hjust = 30, colour = "brown"),
    strip.text = element_text(face = 'bold', hjust = 0.3, debug = "red"),
    plot.caption = element_text(face = 'bold', angle = -35),
    panel.grid.major = element_line('cyan', linewidth = 8),
    panel.grid.minor = element_line("magenta", linewidth = 2),
    panel.grid.major.y = element_line("purple", linewidth = 1),
    panel.ontop = TRUE
  )
```

## 3.2

```{r}
url <- "https://raw.githubusercontent.com/acastroaraujo/socStats/main/simulation_function_week3.R"
source(url)
```

```{r}
sims <- simulation_votes(dem_prob_pop = 0.75, sample_size = 90, num_sims = 1e3)
sims
```

```{r}
theme_set(theme_tufte()) 

sims <- simulation_votes(dem_prob_pop = 0.52, sample_size = 300, num_sims = 500)

results <- sims |> 
  group_by(id) |> 
  summarize(dem_prop = mean(vote == "Dem")) |> 
  mutate(winner = if_else(dem_prop > 0.5, "Dem", "Rep"))

results
```

```{r}
# density plot
results |> 
  ggplot(aes(dem_prop)) + 
  geom_density(fill = "grey90") + 
  geom_vline(xintercept = 0.5, linetype = "dashed")
```

## 3.2.1.1

Average `dem_prop`? Standard deviation of `dem_prop`?

```{r}
mean(results$dem_prop)
sd(results$dem_prop)
```

How does `sample_size` impact these?\
Higher sample size = results closer to true population mean and a lower standard deviation.

## 3.2.1.2

5 different simulations for different values of sample_size

```{r}
sims50 <- simulation_votes(dem_prob_pop = 0.52, sample_size = 50, num_sims = 500)
sims200 <- simulation_votes(dem_prob_pop = 0.52, sample_size = 200, num_sims = 500)
sims500 <- simulation_votes(dem_prob_pop = 0.52, sample_size = 500, num_sims = 500)
sims1000 <- simulation_votes(dem_prob_pop = 0.52, sample_size = 1000, num_sims = 500)
sims2000 <- simulation_votes(dem_prob_pop = 0.52, sample_size = 2000, num_sims = 500)

results50 <- sims50 |> group_by(id, sample_size) |> summarize(dem_prop = mean(vote == "Dem"))
results200 <- sims200 |> group_by(id, sample_size) |> summarize(dem_prop = mean(vote == "Dem"))
results500 <- sims500 |> group_by(id, sample_size) |> summarize(dem_prop = mean(vote == "Dem"))
results1000 <- sims1000 |> group_by(id, sample_size) |> summarize(dem_prop = mean(vote == "Dem"))
results2000 <- sims2000 |> group_by(id, sample_size) |> summarize(dem_prop = mean(vote == "Dem"))

results_all <- bind_rows(results50, results200, results500, results1000, results2000)
```

```{r}
ggplot(results_all, aes(dem_prop, "")) +
  geom_boxplot() +
  facet_wrap(~ sample_size, scales = "free") +
  theme_few()
```

We see the general pattern I mentioned before, higher sample size shrinks the standard deviation (edges of the box) and brings us closer to the true mean of 0.52

## 3.2.1.3

Five different simulations for different values of dem_prop_pop

```{r}
simsP49 <- simulation_votes(dem_prob_pop = 0.49, sample_size = 500, num_sims = 500)
simsP52 <- simulation_votes(dem_prob_pop = 0.52, sample_size = 500, num_sims = 500)
simsP55 <- simulation_votes(dem_prob_pop = 0.55, sample_size = 500, num_sims = 500)
simsP58 <- simulation_votes(dem_prob_pop = 0.58, sample_size = 500, num_sims = 500)
simsP61 <- simulation_votes(dem_prob_pop = 0.61, sample_size = 500, num_sims = 500)

results49 <- simsP49 |> group_by(id, dem_prob_pop) |> summarize(dem_prop = mean(vote == "Dem"))
results52 <- simsP52 |> group_by(id, dem_prob_pop) |> summarize(dem_prop = mean(vote == "Dem"))
results55 <- simsP55 |> group_by(id, dem_prob_pop) |> summarize(dem_prop = mean(vote == "Dem"))
results58 <- simsP58 |> group_by(id, dem_prob_pop) |> summarize(dem_prop = mean(vote == "Dem"))
results61 <- simsP61 |> group_by(id, dem_prob_pop) |> summarize(dem_prop = mean(vote == "Dem"))

results_pop <- bind_rows(results49, results52, results55, results58, results61)
```

```{r}
ggplot(results_pop, aes(dem_prop, "")) +
  geom_boxplot() +
  facet_wrap(~ dem_prob_pop, scales = "free") +
  theme_few()
```

It appears that these simulations have similar standard deviations, but their means all gravitate to the different population means that we supplied them.
